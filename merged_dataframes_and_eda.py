# -*- coding: utf-8 -*-
"""Merged Dataframes and EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NnKIu3Huuq7pybNdOel2DaadYN2zXdez
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
from google.colab import drive
import matplotlib.pyplot as plt
import os
# %matplotlib inline

drive.mount('/content/drive') #mouting drive
os.chdir('drive/My Drive/Capstone/') #changing the current directory path to the project direcotry where the dataset is available

df1= pd.read_csv('stage_2_train_labels.csv')
df2 = pd.read_csv('stage_2_detailed_class_info.csv')
df3 = pd.read_csv('metafile.csv')

print('shape of labeled data:{}\nshape of class details:{}\nshape of meta file:{}'.format(df1.shape,df2.shape,df3.shape))

df1.head(5)

df2.head(5)

df3.head(5)

"""### Finding duplicate patientIds"""

dupRows_df1 = df1[df1.duplicated(subset=['patientId'])]
dupRows_df1.count()

"""##### so Overall 3543 patient ids are redundant

### finding the count of duplicates for each redundant patient id
"""

dupRowsCount_df1 = df1[df1.duplicated(subset=['patientId'],keep=False)] # keep = False, considers all the redundant keys as duplicate. If keep = first, it keeps only the first occurence of redundant key as unique rest all as duplicates
# To get the total count of redundant patientIds out of 3543 redundant id we use keep =False

dupRowsCount_df1.count()

dupRowsCount_df1

"""###This value count suggests that the max number of redundant id per patient is 4"""

dupRowsCount_df1['patientId'].value_counts()

#confirming the results are true
dupRowsCount_df1[dupRowsCount_df1.patientId=="00436515-870c-4b36-a041-de91049b9ab4"].patientId.value_counts()

"""#Merging all the dataframes into one"""

merged_1_2 = pd.merge(df1,df2,on=['patientId'])

merged_1_2.head()

merged_1_2.shape

final_df = pd.merge(merged_1_2,df3,how='left',right_on=['patientID'],left_on='patientId')

final_df.drop('patientID',axis=1,inplace=True)
final_df

final_df.shape

os.getcwd()

# saving this final dataframe having duplicates to a pickle file for future use
import pickle
with open("Overall_data.pkl","wb") as d:
    pickle.dump(final_df,d)

duplicates = final_df[final_df.duplicated(subset='patientId')]

duplicates.shape

final_df.drop_duplicates(subset='patientId',inplace=True) # Note we are dropping duplicates only for the analysis purpose. For modeling we will be using duplicates

final_df.shape

final_df.isna().any() # Note missing vales for x,y,width and height are acceptable

final_df.to_csv('EDA_data_without_duplicates.xslx') # saving non duplicate data in xslx for future use

"""#Data analysis"""

import seaborn as sns

df = pd.read_csv('EDA_data_without_duplicates.xslx') # opening this as a file here so that next we dont have to run the entire code written above to get the same file

df.info()

df.describe()

sns.countplot(df['Target'])

"""The above plot suggests that the samplimg ratio is around 1:4. The total no. of non-pneumonia patients are 4 times more than the ones affected by pneumonia"""

sns.countplot(df['Patient\'s Sex'])

"""The plot above suggests that there around 3000 more female patients. They could be either affected or not affected by pneumonia"""

sns.countplot(final_df['Target'],hue=final_df['Patient\'s Sex'])

"""This here clearly indicates that among pneumonia infected patients most of them are females. Although this alone cannot be a deciding factor since number of counts of female patients was more than males anyway."""

sns.countplot(final_df['View Position'],hue=final_df['Target'])

"""PA : X-rays came from behind the chest
AP: X-rays came from the front
This indicated that most of the detection have been found through AP view even though the count of AP view is less than PA.
"""

sns.countplot(final_df['class'],hue=final_df['Target'])

"""No lung opacity / not normal class is not pneumonia even though opacity is none"""

plt.hist(final_df['Patient\'s Age'])

sns.distplot(df["Patient's Age"])

"""Long skewness at right end, indicating outliers"""

sns.pairplot(df[['Patient\'s Age','class']],hue="class",height=5,kind="scatter")

"""The class hue indicates that there is no significant relation between classess and age. they belong to same population only.
This in other words suggests that Age cannot be a strong deciding factor for detection of pneumonia
"""

